name: CI/CD

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout

      - name: Save Cached Poetry
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache
            ~/.local
          key: poetry-${{ hashFiles('poetry.lock') }}

      - uses: actions/setup-python@v5
        name: Setup Python
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true

      - name: Install dependencies
        run: poetry install --with dev

  type-check:
    name: Type Check
    needs:
      - dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout

      - uses: actions/setup-python@v5
        name: Setup Python
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64

      - name: Load Cached Poetry
        id: cached-poetry
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache
            ~/.local
          key: poetry-${{ hashFiles('poetry.lock') }}

      - name: Type Check
        run: poetry run poe typecheck

  lint:
    name: Lint
    needs:
      - dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout

      - uses: actions/setup-python@v5
        name: Setup Python
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64

      - name: Load Cached Poetry
        id: cached-poetry
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache
            ~/.local
          key: poetry-${{ hashFiles('poetry.lock') }}

      - name: Lint
        run: poetry run poe lint

  test:
    name: Test
    needs:
      - dependencies
    runs-on: ubuntu-latest
    environment:
      name: test
      url: https://app.codecov.io/gh/${{ github.repository }}/
    steps:
      - uses: actions/checkout@v4
        name: Checkout

      - uses: actions/setup-python@v5
        name: Setup Python
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64

      - name: Load Cached Poetry
        id: cached-poetry
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache
            ~/.local
          key: poetry-${{ hashFiles('poetry.lock') }}

      - name: Test
        run: poetry run poe test --cov-report=xml --cov-report=html

      - name: Prepare list of JSON files with mismatching pairs
        if: failure()
        run: |
          mkdir -p artifacts
          for file in $(find tests/ -name "*.mismatch.json"); do
            base=${file%.mismatch.json}.json
            if [[ -f "$base" ]]; then
              echo "$file" >> artifacts/files_to_upload.txt
              echo "$base" >> artifacts/files_to_upload.txt
            fi
          done

      - name: Collect Mismatching Store Snapshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: mismatching-snapshots
          path: |
            @artifacts/files_to_upload.txt

      - name: Collect HTML Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: integration
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build
    needs:
      - dependencies
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      name: ${{ steps.extract_version.outputs.name }}
    steps:
      - uses: actions/checkout@v4
        name: Checkout

      - uses: actions/setup-python@v5
        name: Setup Python
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: x64

      - name: Load Cached Poetry
        id: cached-poetry
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cache
            ~/.local
          key: poetry-${{ hashFiles('poetry.lock') }}

      - name: Build
        run: poetry build

      - name: Extract Version
        id: extract_version
        run: |
          echo "version=$(poetry version --short)" >> "$GITHUB_OUTPUT"
          echo "name=$(poetry version | cut -d' ' -f1)" >> "$GITHUB_OUTPUT"

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel
          path: dist/*.whl
          if-no-files-found: error

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: binary
          path: dist/*.tar.gz
          if-no-files-found: error

  pypi-publish:
    name: Publish to PyPI
    if: >-
      github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs:
      - type-check
      - lint
      - test
      - build
    runs-on: ubuntu-latest
    environment:
      name: release
      url: https://pypi.org/p/${{ needs.build.outputs.name }}
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheel
          path: dist

      - uses: actions/download-artifact@v4
        with:
          name: binary
          path: dist

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
          verbose: true

  release:
    name: Release
    needs:
      - type-check
      - lint
      - test
      - build
      - pypi-publish
    environment:
      name: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Procure Wheel
        uses: actions/download-artifact@v4
        with:
          name: wheel
          path: artifacts

      - name: Procure Binary
        uses: actions/download-artifact@v4
        with:
          name: binary
          path: artifacts

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*
          tag_name: v${{ needs.build.outputs.version }}
          body: |
            Release of version ${{ needs.build.outputs.version }}
            PyPI package: https://pypi.org/project/${{ needs.build.outputs.name }}/${{ needs.build.outputs.version }}
          prerelease: false
          draft: false
